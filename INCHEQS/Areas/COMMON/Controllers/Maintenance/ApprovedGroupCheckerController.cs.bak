//bank of Malaysia
//using INCHEQS.BNM.BankCode;
//using INCHEQS.BNM.BranchCode;
//using INCHEQS.BNM.ReturnCode;
//using INCHEQS.BNM.StateCode;

//bank of Philipine
//using INCHEQS.PCHC.ReturnCode;
using INCHEQS.PCHC.StateCode;

using INCHEQS.Areas.ICS.Models.HostReturnReason;
using INCHEQS.Areas.ICS.Models.PullOutReason;
using INCHEQS.Models;
using INCHEQS.Areas.COMMON.Models.Group;
using INCHEQS.Security.AuditTrail;
using INCHEQS.Models.SearchPageConfig;
using INCHEQS.Models.SearchPageConfig.Services;
using INCHEQS.TaskAssignment;
using INCHEQS.ConfigVerification.ThresholdSetting;

using INCHEQS.Security.User;
//using INCHEQS.Security.Group;
using INCHEQS.ConfigVerification.VerificationLimit;
using INCHEQS.Resources;
using INCHEQS.Security;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Mvc;

using INCHEQS.Areas.OCS.Models.TransactionType;
using INCHEQS.Areas.OCS.Models.TCCode;
using INCHEQS.Areas.OCS.Models.TransactionCode;
using INCHEQS.Areas.OCS.Models.SystemCutOffTime;
using INCHEQS.Security.SystemProfile;

using INCHEQS.DataAccessLayer;
using System.Data;
using INCHEQS.Areas.COMMON.Models.BranchCode;
using INCHEQS.Areas.COMMON.Models.InternalBranch;
using INCHEQS.Areas.COMMON.Models.ReturnCode;

namespace INCHEQS.Areas.COMMON.Controllers.Maintenance
{
    public class ApprovedGroupCheckerController : BaseController
    {

        private readonly IGroupProfileDao groupProfileDao;
        private readonly IAuditTrailDao auditTrailDao;
        private IPageConfigDao pageConfigDao;
        private IUserDao userDao;


        private IHostReturnReasonDao hostReturnReasonDao;
        private IStateCodeDao stateCodeDao;
        private IBranchCodeDao branchCodeDao;
        private IReturnCodeDao returnCodeDao;
        private IInternalBranchDao internalBranchDao;
        private IVerificationLimitDao verificationLimitDao;
        private IPullOutReasonDao pullOutReasonDao;


        private IThresholdSettingDao thresholdSettingDao;

        private ITransactionTypeDao transactionTypeDao;
        private ITCCodeDao tcCodeDao;
        private ITransactionCodeDao transactionCodeDao;

        protected readonly ISearchPageService searchPageService;
        private ITaskDao taskDao;

        private ISystemCutOffTimeDao systemCutOffTimeDao;
        private ISystemProfileDao systemProfileDao;

        private readonly ApplicationDbContext dbContext;

        public ApprovedGroupCheckerController(ISystemProfileDao systemProfileDao, ISystemCutOffTimeDao systemCutOffTimeDao, IUserDao userDao, IAuditTrailDao auditTrailDao, IPageConfigDao pageConfigDao, ISearchPageService searchPageService,  IHostReturnReasonDao hostReturnReasonDao, IStateCodeDao stateCodeDao, IBranchCodeDao branchCodeDao, IInternalBranchDao internalBranchDao, IVerificationLimitDao verificationLimitDao, IPullOutReasonDao pullOutReasonDao, IReturnCodeDao returnCodeDao, ITransactionCodeDao transactionCodeDao, ITransactionTypeDao transactionTypeDao, ITCCodeDao tcCodeDao, IThresholdSettingDao thresholdSettingDao, ITaskDao taskDao, ApplicationDbContext dbContext, IGroupProfileDao groupProfileDao)
        {
            this.userDao = userDao;
            this.pageConfigDao = pageConfigDao;
            this.auditTrailDao = auditTrailDao;
            this.searchPageService = searchPageService;
            this.hostReturnReasonDao = hostReturnReasonDao;
            this.stateCodeDao = stateCodeDao;
            this.branchCodeDao = branchCodeDao;
            this.internalBranchDao = internalBranchDao;
            this.verificationLimitDao = verificationLimitDao;
            this.pullOutReasonDao = pullOutReasonDao;
            this.returnCodeDao = returnCodeDao;
            this.transactionCodeDao = transactionCodeDao;
            this.transactionTypeDao = transactionTypeDao;
            this.tcCodeDao = tcCodeDao;
            this.thresholdSettingDao = thresholdSettingDao;
            this.groupProfileDao = groupProfileDao;
            this.taskDao = taskDao;
            this.systemCutOffTimeDao = systemCutOffTimeDao;
            this.systemProfileDao = systemProfileDao;
            this.dbContext = dbContext;
        }

        [CustomAuthorize(TaskIds = TaskIdsOCS.ApprovedGroupChecker.INDEX)]
        [GenericFilter(AllowHttpGet = true)]
        public ActionResult Index()
        {
            ViewBag.SearchPage = pageConfigDao.GetSearchFormModelFromConfig(CurrentUser.Account, new PageSqlConfig(TaskIdsOCS.ApprovedGroupChecker.INDEX));
            ViewBag.PageTitle = groupProfileDao.GetPageTitle(TaskIdsOCS.ApprovedGroupChecker.INDEX);
            return View();
        }

        [CustomAuthorize(TaskIds = TaskIdsOCS.ApprovedGroupChecker.INDEX)]
        [GenericFilter(AllowHttpGet = true)]
        public virtual ActionResult SearchResultPage(FormCollection collection)
        {
            ViewBag.SearchResult = pageConfigDao.getResultListFromDatabaseView(new PageSqlConfig(TaskIdsOCS.ApprovedGroupChecker.INDEX, "View_ApprovedGroupChecker", "fldStatus asc, fldId asc", "fldBankCode=@fldBankCode", new[] {
                    new SqlParameter("@fldBankCode",CurrentUser.Account.BankCode)}),
            collection);
            return View();
        }

        [CustomAuthorize(TaskIds = TaskIdsOCS.ApprovedGroupChecker.INDEX)]
        [GenericFilter(AllowHttpGet = true)]
        public ActionResult Edit(FormCollection col, string groupIdParam = "")
        {
            Dictionary<string, string> filter = searchPageService.GetFormFiltersFromRow(col);
            string groupId = "";

            if (string.IsNullOrEmpty(groupIdParam))
            {
                groupId = filter["fldId"].Trim();
            }
            else
            {
                groupId = groupIdParam;
            }

            ViewBag.PageTitle = groupProfileDao.GetPageTitle(TaskIdsOCS.ApprovedGroupChecker.INDEX);

            ViewBag.GroupChecker = groupProfileDao.GetGroupChecker(groupId, "Update");
            ViewBag.SelectedUserChecker = groupProfileDao.ListSelectedUserInGroupChecker(groupId, CurrentUser.Account.BankCode);
            ViewBag.AvailableUserChecker = groupProfileDao.ListAvailableUserInGroupChecker(CurrentUser.Account.BankCode);
            return View();
        }

        [CustomAuthorize(TaskIds = TaskIdsOCS.ApprovedGroupChecker.VERIFY)]
        [HttpPost]
        public ActionResult VerifyA(FormCollection col)
        {

            string taskid = TaskIdsOCS.ApprovedGroupChecker.VERIFY;
            if (CurrentUser.HasTask(taskid))
            {
                CurrentUser.Account.TaskId = taskid;
            }

            try
            {
                List<string> arrResults = new List<string>();
                String[] tmpArr = new String[5];
                string astatus = "";
                string userid = "";

                if ((col["deleteBox"]) != null)
                {
                    arrResults = col["deleteBox"].Split(',').ToList();
                    foreach (string arrResult in arrResults)
                    {

                        tmpArr = arrResult.Split(':');
                        string action = tmpArr[0].Trim().ToString();
                        string taskId = tmpArr[1].Trim().ToString();
                        string id = tmpArr[2].Trim().ToString();
                        if (tmpArr.Length > 3)
                        {
                            astatus = tmpArr[3].Trim().ToString();
                            userid = tmpArr[4].Trim().ToString();
                        }

                        if (action.Equals("A"))
                        {
                            if (astatus != "" && userid != "")
                            {
                                groupProfileDao.MoveToGroupUserFromTemp(id, userid, "Create");
                                groupProfileDao.DeleteGroupUserTemp(id, userid, "VERIFYA");
                            }
                            if (groupProfileDao.CheckGroupMasterExistByID(id, "GroupCheckerAdd") == false)
                            {
                                groupProfileDao.MoveToGroupMasterFromTemp(id, "Create"); 
                            }

                            groupProfileDao.DeleteGroupMasterTemp(id, "Approve");  
                            auditTrailDao.Log("Approve - Create Group ID : " + id, CurrentUser.Account);


                        }
                        else if (action.Equals("D"))
                        {
                            if (astatus != "" && userid != "")
                            {
                                groupProfileDao.UpdateGroupUserTemp(id, userid);
                                groupProfileDao.DeleteGroupUserFromTemp(id,userid);
                                groupProfileDao.DeleteGroupUserTemp(id, userid, "VERIFYA");
                            }

                            groupProfileDao.UpdateGroupMasterTemp(id);
                            groupProfileDao.DeleteGroupMaster(id);
                            groupProfileDao.DeleteGroupMasterTemp(id, "Approve");                             
                            auditTrailDao.Log("Approve - Delete Group ID : " + id, CurrentUser.Account);


                        }
                        else if (action.Equals("E"))
                        {
                            groupProfileDao.MoveToGroupMasterFromTemp(id, "Update");
                            groupProfileDao.DeleteGroupMasterTemp(id, "Approve"); 
                            auditTrailDao.Log("Approve - Update Group ID : " + id, CurrentUser.Account);


                            if (groupProfileDao.CheckGroupUserExistInTemp(id, userid, "Delete") == true)
                            {
                                groupProfileDao.DeleteGroupUserTemp(id, userid, "Delete");
                            }

                            if (groupProfileDao.CheckGroupUserExistInTemp(id, userid, "Add") == true) 
                            {
                                groupProfileDao.MoveToGroupUserFromTemp(id, userid, "Update");
                            }
                            else
                            {
                                groupProfileDao.MoveToGroupUserFromTemp(id, userid, "Edit");
                            }

                            groupProfileDao.DeleteGroupUserTemp(id, userid, "VERIFYA");
                            groupProfileDao.MoveToGroupMasterFromTemp(id, "Update");
                            groupProfileDao.DeleteGroupMasterTemp(id, "Approve"); 
                            auditTrailDao.Log("Approve - Update Group ID : " + id, CurrentUser.Account);
                        }
                    }

                    TempData["Notice"] = Locale.RecordsSuccsesfullyVerified;

                }
                else
                {
                    TempData["Warning"] = Locale.PleaseSelectARecord;
                }
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [CustomAuthorize(TaskIds = TaskIdsOCS.ApprovedGroupChecker.VERIFY)]
        [HttpPost]
        public ActionResult VerifyR(FormCollection col)
        {
            string taskid = TaskIdsOCS.ApprovedGroupChecker.VERIFY;
            if (CurrentUser.HasTask(taskid))
            {
                CurrentUser.Account.TaskId = taskid;
            }

            try
            {
                List<string> arrResults = new List<string>();
                String[] tmpArr = new String[3];
                string astatus = "";
                string userid = "";

                if ((col["deleteBox"]) != null)
                {
                    arrResults = col["deleteBox"].Split(',').ToList();
                    foreach (string arrResult in arrResults)
                    {

                        tmpArr = arrResult.Split(':');
                        string actTask = tmpArr[0].Trim().ToString();
                        string action = actTask.Substring(0, 1);
                        string taskId = actTask.Substring(1, 6);  //tmpArr[1].Trim().ToString();
                        string id = actTask.Remove(0, 7); //tmpArr[1].Trim().ToString();
                        if (tmpArr.Length > 1)
                        {
                            astatus = tmpArr[1].Trim().ToString();
                            userid = tmpArr[2].Trim().ToString();
                        }

                        if (astatus != "" && userid != "")
                        {
                            groupProfileDao.DeleteGroupUserTemp(id, userid, "VERIFYR");
                        }

                        groupProfileDao.DeleteGroupUserTemp(id, userid, "VERIFYR");
                        groupProfileDao.DeleteGroupMasterTemp(id, "Reject");

                        auditTrailDao.Log("Reject Create ,Update or Delete - Group ID :" + id, CurrentUser.Account);
                    }
                    TempData["Notice"] = Locale.RecordsSuccsesfullyRejected;
                }
                else
                {
                    TempData["Warning"] = Locale.PleaseSelectARecord;
                }
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}