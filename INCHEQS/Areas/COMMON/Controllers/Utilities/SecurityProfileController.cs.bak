using INCHEQS.Security.AuditTrail;
using INCHEQS.Security.SecurityProfile;
using INCHEQS.TaskAssignment;
using INCHEQS.Resources;
using INCHEQS.Security;
using System;
using System.Collections.Generic;
using System.Web.Mvc;
using INCHEQS.Security.SystemProfile;

namespace INCHEQS.Areas.COMMON.Controllers.Utilities {
    
    public class SecurityProfileController : BaseController {

        private readonly ISecurityProfileDao securityprofile;
        protected readonly ISystemProfileDao systemProfileDao;
        private readonly IAuditTrailDao auditTrailDao;

        public SecurityProfileController(ISecurityProfileDao securityprofile , IAuditTrailDao auditTrailDao, ISystemProfileDao systemProfileDao) {
            this.securityprofile = securityprofile;
            this.auditTrailDao = auditTrailDao;
            this.systemProfileDao = systemProfileDao;
        }
        // GET: SecurityProfile
        [CustomAuthorize(TaskIds = TaskIds.SecurityProfile.INDEX)]
        [GenericFilter(AllowHttpGet = true)]
        public ActionResult Index() {
            ViewBag.SecurityProfile = securityprofile.GetSecurityProfile();
            //ViewBag.SecurityProfileTemp = securityprofile.GetSecurityProfileTemp();
            return View();
        }

        [CustomAuthorize(TaskIds = TaskIds.SecurityProfile.UPDATE)]
        [HttpPost()]
        public ActionResult Update(FormCollection col) {
            string x = col["chkYes"];
            try {
                //string systemProfile = systemProfileDao.GetValueFromSystemProfile("SecurityProfileChecker", CurrentUser.Account.BankCode).Trim();
                string securityProfile = securityprofile.GetValueFromSecurityProfile("fldDualApproval", CurrentUser.Account.BankCode).Trim();

                List<string> errorMessages = securityprofile.ValidateSecurity(col);
                if ((errorMessages.Count > 0))
                {
                    TempData["ErrorMsg"] = errorMessages;

                }
                else
                {
                    if (securityprofile.CheckSecurityProfileTemp() == false)
                    {
                        if ("N".Equals(securityProfile))
                    {
                    SecurityProfileModel before = securityprofile.GetSecurityProfile();
                    auditTrailDao.Log("Edit Security Profile - Before Change=> Password Expiry Interval : " + before.fldUserPwdExpiryInt + " Password Notification Interval :" + before.fldUserPwdNotificationInt + " User Account Expiry Interval :" + before.fldUserAcctExpiryInt + " User ID Length : MIN(" + before.fldUserIdLengthMin + ")MAX(" + before.fldUserIdLengthMax + ") User Password Length : MIN(" + before.fldUserPwdLengthMin + ")MAX(" + before.fldUserPwdLengthMax + ")" + " User Session Timeout:" + before.fldUserSessionTimeOut + " Password History List Reusable after :" + 1 + " Login Attempt:" + before.fldUserLoginAttempt, CurrentUser.Account);
                        securityprofile.UpdateSecurity(col, CurrentUser.Account.UserId);

                    SecurityProfileModel after = securityprofile.GetSecurityProfile();
                    auditTrailDao.Log("Edit Security Profile - After Change=> Password Expiry Interval : " + after.fldUserPwdExpiryInt + " Password Notification Interval :" + after.fldUserPwdNotificationInt + " User Account Expiry Interval :" + after.fldUserAcctExpiryInt + " User ID Length : MIN(" + after.fldUserIdLengthMin + ")MAX(" + after.fldUserIdLengthMax + ") User Password Length : MIN(" + after.fldUserPwdLengthMin + ")MAX(" + after.fldUserPwdLengthMax + ")" + " User Session Timeout:" + after.fldUserSessionTimeOut + " Password History List Reusable after :" + 1 + " Login Attempt:" + after.fldUserLoginAttempt, CurrentUser.Account);

                    TempData["Notice"] = Locale.RecordsuccesfullyCreated;
                }
                    else
                    {
                            securityprofile.CreateSecurityMasterTemp(col, CurrentUser.Account.UserId);
                            if (securityprofile.CheckSecurityProfileTemp() == true)
                            {
                                securityprofile.CreateSecurityProfileChecker("Security Profile","Update", CurrentUser.Account.UserId);
                        }
                        TempData["Notice"] = Locale.SecurityProfileSucessfullyAddedToUpdate;
                            auditTrailDao.Log("Security Profile Record Successfully Added to Temp Table for Check to Approve . User Id : " + col["fldUserId"], CurrentUser.Account);

                    }
                }

                    else
                    {
                        TempData["Warning"] = Locale.SecurityProfileRecordPendingforApproval;
                    }

                }
            } catch (Exception ex) {
                throw ex;
            }
            return RedirectToAction("Index");
        }
    }
}
