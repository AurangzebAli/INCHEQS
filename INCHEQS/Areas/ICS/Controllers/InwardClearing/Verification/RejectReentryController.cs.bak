using INCHEQS.Areas.ICS.Concerns;
using INCHEQS.Areas.ICS.Models.HostReturnReason;
using INCHEQS.ConfigVerification.LargeAmount;
using INCHEQS.Security.SystemProfile;
using INCHEQS.Areas.ICS.Models.Verification;
using INCHEQS.Helpers;
using INCHEQS.Security.AuditTrail;
using INCHEQS.Models.CommonInwardItem;
using INCHEQS.Models.RejectReentry;
using INCHEQS.Models.Report;
using INCHEQS.Models.SearchPageConfig;
using INCHEQS.Models.SearchPageConfig.Services;
using INCHEQS.Models.Sequence;
using INCHEQS.Security.User;
using INCHEQS.Models.Verification;
using INCHEQS.Security;
//using INCHEQS.Security.User;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Mvc;

namespace INCHEQS.Areas.ICS.Controllers.InwardClearing.Verification {

    //RejectReentry?rrType=m
    //RejectReentry?rrType=c
    public class RejectReentryController : ICCSBaseController {


        private readonly IRejectReentryDao rejectReentryDao;
        string taskIdParam;

        public RejectReentryController(IPageConfigDao pageConfigDao, IRejectReentryDao rejectReentryDao , ICommonInwardItemDao commonInwardItemDao , ISearchPageService searchPageService, IAuditTrailDao auditTrailDao, ISequenceDao sequenceDao, IVerificationDao verificationDao , IReportService reportService, IHostReturnReasonDao hostReturnReasonDao, UserDao userDao, ILargeAmountDao largeAmountDao, ISystemProfileDao systemProfileDao) 
            : base(pageConfigDao , commonInwardItemDao, searchPageService, auditTrailDao , sequenceDao, verificationDao, reportService, hostReturnReasonDao, userDao, largeAmountDao, systemProfileDao) {

            this.rejectReentryDao = rejectReentryDao;

            base.chequeVerificationPageHtml = "ChequeVerificationPage";
            base.searchPageHtml = "InwardClearing/ICCSDefault/Index";
            base.searchResultPageHtml = "InwardClearing/ICCSDefault/SearchResultPage";
        }

        protected override string initializeQueueTaskId() {
            taskIdParam = RequestHelper.PersistQueryStringForActions(ControllerContext, "tId");           
            return taskIdParam;
        }

        //RRVerificationSave
        public async Task<ActionResult> ConfirmMICR(FormCollection collection) {
            await initializeBeforeAction();
            string inwardItemId = collection["current_fldInwardItemId"];
            Dictionary<string, string> result = commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);
  List<string> errorMessages = new List<string>();
            int Checking = 0;

            string systemProfile = systemProfileDao.GetValueFromSystemProfile("DualApproval", CurrentUser.Account.BankCode).Trim();

            if ("Y".Equals(systemProfile))
            {

            if ("Maker".Equals(gQueueSqlConfig.TaskRole))
            {
                errorMessages = rejectReentryDao.Validate(collection, CurrentUser.Account);
                Checking = errorMessages.Count;
            }
            //check if validate contain error
                if ((Checking > 0))
                {
                result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
                }
                else
                {

                //check next available cheque
                result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                //if next cheque is not available.. check previous instead
                    if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]))
                    {
                    result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }

                //UpdateRecFn
                //If fldCheckerMaker from tblTaskMaster is M = (Maker)
                    if ("Maker".Equals(gQueueSqlConfig.TaskRole))
                    {
                    rejectReentryDao.MakerConfirm(collection, CurrentUser.Account, gQueueSqlConfig.TaskId);
                }
                //If fldCheckerMaker from tblTaskMaster is C = (Checker)
                    else if ("Checker".Equals(gQueueSqlConfig.TaskRole))
                    {

                    rejectReentryDao.CheckerConfirm(collection, CurrentUser.Account);
                    
                    //Insert to cheque history
                    commonInwardItemDao.InsertChequeHistory(collection, VerificationStatus.ACTION.RejectReentryChecker, CurrentUser.Account, gQueueSqlConfig.TaskId); //E

                    //Update sequence no
                    sequenceDao.UpdateSequenceNo(sequenceDao.GetNextSequenceNo("tblInwardItemInfo"), "tblInwardItemInfo");
                    sequenceDao.UpdateSequenceNo(sequenceDao.GetNextSequenceNo("tblInwardItemHistory"), "tblInwardItemHistory");

                }
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;

            }

            // if cheque available or contain error msg.. render cheque page
                if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
                {
                ViewBag.InwardItemViewModel = resultModel;
                ViewBag.HostStatus = hostReturnReasonDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                return View("ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
                else
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
            }
            else
            {
          
                    errorMessages = rejectReentryDao.Validate(collection, CurrentUser.Account);
                    Checking = errorMessages.Count;
             
                //check if validate contain error
                if ((Checking > 0))
                {
                    result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
                }
                else
                {

                    //check next available cheque
                    result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                    //if next cheque is not available.. check previous instead
                    if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]))
                    {
                        result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                        resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                    }

                    //UpdateRecFn
                    //If fldCheckerMaker from tblTaskMaster is M = (Maker)
                    //if ("Maker".Equals(gQueueSqlConfig.TaskRole))
                    //{
                    //    rejectReentryDao.MakerConfirm(collection, CurrentUser.Account, gQueueSqlConfig.TaskId);
                    //}
                    ////If fldCheckerMaker from tblTaskMaster is C = (Checker)
                    //else if ("Checker".Equals(gQueueSqlConfig.TaskRole))
                    //{

                        rejectReentryDao.CheckerConfirmNew(collection, CurrentUser.Account, gQueueSqlConfig.TaskId);

                        //Insert to cheque history
                        //commonInwardItemDao.InsertChequeHistory(collection, VerificationStatus.ACTION.RejectReentryChecker, CurrentUser.Account, gQueueSqlConfig.TaskId); //E

                        //Update sequence no
                        sequenceDao.UpdateSequenceNo(sequenceDao.GetNextSequenceNo("tblInwardItemInfo"), "tblInwardItemInfo");
                        sequenceDao.UpdateSequenceNo(sequenceDao.GetNextSequenceNo("tblInwardItemHistory"), "tblInwardItemHistory");

                    //}
                    //Minus Record Indicator
                    ViewBag.MinusRecordIndicator = true;

                //}

                
            }
                // if cheque available or contain error msg.. render cheque page
                if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
                {
                    ViewBag.InwardItemViewModel = resultModel;
                    ViewBag.HostStatus = hostReturnReasonDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    return View("ChequeVerificationPage");
                }
                // if not.. render empty cheque with close button
                else
                {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }
}

        
        public async Task<ActionResult> RepairMICR(FormCollection collection) {
            await initializeBeforeAction();
            string inwardItemId = collection["current_fldInwardItemId"];
            string updateTimestamp = collection["current_fldUpdateTimestamp"];
            Dictionary<string, string> result = commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);
     //List<string> errorMessages = rejectReentryDao.Validate(collection, CurrentUser.Account);

            //check if validate contain error
            //if ((errorMessages.Count > 0)) {
            //    result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
            //    resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
            //} else {

                //check next available cheque
                result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                //if next cheque is not available.. check previous instead
                if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"])) {
                    result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }

                //UpdateRecFn
                rejectReentryDao.CheckerRepair(collection, CurrentUser.Account);

                //Insert to cheque history
                commonInwardItemDao.InsertChequeHistory(collection, VerificationStatus.ACTION.RejectReentryApprove, CurrentUser.Account, gQueueSqlConfig.TaskId); //F - History for checker ask to repair

                //Update sequence no
                sequenceDao.UpdateSequenceNo(sequenceDao.GetNextSequenceNo("tblInwardItemInfo"), "tblInwardItemInfo");
                sequenceDao.UpdateSequenceNo(sequenceDao.GetNextSequenceNo("tblInwardItemHistory"), "tblInwardItemHistory");

                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
             //}

            // if cheque available.. render cheque page
            if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) /*|| errorMessages.Count > 0*/) {
                ViewBag.InwardItemViewModel = resultModel;
                return View("ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
            else {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }


    }
}