using INCHEQS.Areas.ICS.Concerns;
using INCHEQS.Areas.ICS.Models.HostReturnReason;
using INCHEQS.ConfigVerification.LargeAmount;
using INCHEQS.Security.SystemProfile;
using INCHEQS.Areas.ICS.Models.Verification;
using INCHEQS.Helpers;
using INCHEQS.Security.AuditTrail;
using INCHEQS.Models.CommonInwardItem;
using INCHEQS.Models.Report;
using INCHEQS.Models.SearchPageConfig;
using INCHEQS.Models.SearchPageConfig.Services;
using INCHEQS.Models.Sequence;
using INCHEQS.Security.User;
using INCHEQS.Models.Verification;
using INCHEQS.Security;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Web.Mvc;
using INCHEQS.Areas.ICS.Service;
using INCHEQS.Areas.COMMON.Models.BankHostStatusKBZ;


namespace INCHEQS.Areas.ICS.Controllers.InwardClearing.Verification
{
    public class VerificationController : ICCSBaseController
    {

        public VerificationController(IPageConfigDao pageConfigDao, ICommonInwardItemDao commonInwardItemDao, ISearchPageService searchPageService, IAuditTrailDao auditTrailDao, ISequenceDao sequenceDao, IVerificationDao verificationDao, IReportService reportService, IHostReturnReasonDao hostReturnReasonDao, IBankHostStatusKBZDao bankHostStatusKBZDao, UserDao userDao, ILargeAmountDao largeAmountDao, ISystemProfileDao systemProfileDao) : base(pageConfigDao, commonInwardItemDao, searchPageService, auditTrailDao, sequenceDao, verificationDao, reportService, hostReturnReasonDao, bankHostStatusKBZDao, userDao, largeAmountDao, systemProfileDao) { }

        protected override string initializeQueueTaskId()
        {
            return RequestHelper.PersistQueryStringForActions(ControllerContext, "tId");
        }
        
        public async Task<ActionResult> VerificationApprove(FormCollection collection)
        {

            await initializeBeforeAction();
            string inwardItemId = collection["fldInwardItemId"];
            Log(DateTime.Now + ":Get inward item id :" + inwardItemId, CurrentUser.Account.BankCode);
            Log(DateTime.Now + ":Get inward item UIC :" + collection["fldUIC"], CurrentUser.Account.BankCode);
            Log(DateTime.Now + ":Get inward item check no :" + collection["fldChequeSerialNo"], CurrentUser.Account.BankCode);
            Log(DateTime.Now + ":Get inward item acc no :" + collection["fldAccountNumber"], CurrentUser.Account.BankCode);
            Log(DateTime.Now + ":Get inward item image name :" + collection["imageId"], CurrentUser.Account.BankCode);
            string verifyAction = VerificationStatus.ACTION.VerificationApprove;// A = Approve 
            Log(DateTime.Now + ":Start validate verification ", CurrentUser.Account.BankCode);
            List<string> errorMessages = verificationDao.ValidateVerification(collection, CurrentUser.Account, verifyAction);
            Log(DateTime.Now + ":Finish validate verification ", CurrentUser.Account.BankCode);
            Dictionary<string, string> result;//= commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);
            //Dictionary<string, string> afterResult = commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);
            
            //check if validate contain error
            if ((errorMessages.Count > 0))
            {
                Log(DateTime.Now + ":Validate verification fail ", CurrentUser.Account.BankCode);
                result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                if (result == null)
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
                resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);

            }
            else
            {
                if (!String.IsNullOrEmpty(collection["fldUIC2"]))
                {
                    commonInwardItemDao.DeleteTempGif(collection["fldUIC2"]);
                }
                //check next available cheque
                Log(DateTime.Now + ":Check available check ", CurrentUser.Account.BankCode);
                if (staskid == "306910" || staskid == "306920" || staskid =="306930" || staskid == "308140" || staskid == "308130" || staskid == "306550" || staskid == "306210" || staskid == "306220" || staskid == "306230")
                {
                    //Approve Process//Insert to cheque history
                    verificationDao.VerificationApproveNew(collection, CurrentUser.Account, gQueueSqlConfig, verifyAction);

                    result = commonInwardItemDao.NextChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                }
                else
                {
                    result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }

                }
                
                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                //if next cheque is not available.. check previous instead
                if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]))
                {
                    Log(DateTime.Now + ":Check available check fail ", CurrentUser.Account.BankCode);
                    if (staskid == "306910" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306550" || staskid == "306210" || staskid == "306220" || staskid == "306230")
                    {
                        result = commonInwardItemDao.PrevChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    }
                    else
                    {
                        result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    } 
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }
                if (staskid == "306910" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306550" || staskid == "306210" || staskid == "306220" || staskid == "306230")
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("fldDesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                }
                else
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                    //Approve Process
                    verificationDao.VerificationApprove(collection, CurrentUser.Account, gQueueSqlConfig.TaskRole);

                    //Insert to cheque history
                    commonInwardItemDao.InsertChequeHistory(collection, verifyAction, CurrentUser.Account, gQueueSqlConfig.TaskId);
                }

                    //Minus Record Indicator
                    ViewBag.MinusRecordIndicator = true;
                    ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
            }

            // if cheque available.. render cheque page
            if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
            {
                ViewBag.InwardItemViewModel = resultModel;
                ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                //add new thing
                ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
                return View("InwardClearing/ICCSDefault/ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
            else
            {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }

        public async Task<ActionResult> VerificationReturn(FormCollection collection)
        {
            await initializeBeforeAction();
            string inwardItemId = collection["fldInwardItemId"];
            string verifyAction = VerificationStatus.ACTION.VerificationReturn;// R = Return 
            List<string> errorMessages = verificationDao.ValidateVerification(collection, CurrentUser.Account, verifyAction);
            Dictionary<string, string> result;// = commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);

            //check if validate contain error
            if ((errorMessages.Count > 0))
            {
                result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                if (result == null)
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
                resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
            }
            else
            {
                if (!String.IsNullOrEmpty(collection["fldUIC2"]))
                {
                    commonInwardItemDao.DeleteTempGif(collection["fldUIC2"]);
                }
                //check next available cheque
                if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306550" || staskid == "306220" || staskid == "306230")
                {
                    verificationDao.VerificationReturnNew(collection, CurrentUser.Account, gQueueSqlConfig, verifyAction);
                    result = commonInwardItemDao.NextChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                }
                else
                {

                    result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                }
                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                //if next cheque is not available.. check previous instead
                if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"])) {
                    if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306550" || staskid == "306220" || staskid == "306230")
                    {
                        result = commonInwardItemDao.PrevChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    }
                    else
                    {
                        result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    }
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }
                if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306550" || staskid == "306220" || staskid == "306230")
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("fldDesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                }
                else
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                    //Return Process
                    verificationDao.VerificationReturn(collection, CurrentUser.Account, gQueueSqlConfig.TaskRole);

                    //Insert to cheque history
                    commonInwardItemDao.InsertChequeHistory(collection, verifyAction, CurrentUser.Account, gQueueSqlConfig.TaskId);

                }
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
            }

            // if cheque available.. render cheque page
            if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
            {
                ViewBag.InwardItemViewModel = resultModel;
                ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                //add new thing
                ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
                return View("InwardClearing/ICCSDefault/ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
            else
            {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }

        public async Task<ActionResult> VerificationRoute(FormCollection collection)
        {
            await initializeBeforeAction();
            string inwardItemId = collection["fldInwardItemId"];
            string verifyAction = VerificationStatus.ACTION.VerificationRoute;// B = Route to branch 
            List<string> errorMessages = verificationDao.ValidateVerification(collection, CurrentUser.Account, verifyAction);
            Dictionary<string, string> result;//= commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);

            //check if validate contain error
            if ((errorMessages.Count > 0))
            {
                result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                if (result == null)
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
                resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
            }
            else
            {
                if (!String.IsNullOrEmpty(collection["fldUIC2"]))
                {
                    commonInwardItemDao.DeleteTempGif(collection["fldUIC2"]);
                }
                //check next available cheque
                if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306220" || staskid == "306230")
                {
                    verificationDao.VerificationRouteNew(collection, CurrentUser.Account, gQueueSqlConfig, verifyAction);
                    result = commonInwardItemDao.NextChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                }
                else
                {

                    result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                    ////Route to branch process
                    //verificationDao.VerificationRoute(collection, CurrentUser.Account);

                    ////Insert to cheque history
                    //commonInwardItemDao.InsertChequeHistory(collection, verifyAction, CurrentUser.Account, gQueueSqlConfig.TaskId);

                }
                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                //if next cheque is not available.. check previous instead
                if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"])) {
                    if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306220" || staskid == "306230")
                    {
                        result = commonInwardItemDao.PrevChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    }
                    else
                    {
                        result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    }
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }
                if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306220" || staskid == "306230")
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("fldDesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                }
                else
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                    //Route to branch process
                    verificationDao.VerificationRoute(collection, CurrentUser.Account);

                    //Insert to cheque history
                    commonInwardItemDao.InsertChequeHistory(collection, verifyAction, CurrentUser.Account, gQueueSqlConfig.TaskId);
                }
                //Minus Record Indicator
                    ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];

            }

            // if cheque available.. render cheque page
            if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
            {
                ViewBag.InwardItemViewModel = resultModel;
                ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                //add new thing
                ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
                return View("InwardClearing/ICCSDefault/ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
            else
            {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }


        public async Task<ActionResult> VerificationPullOut(FormCollection collection)
        {
            await initializeBeforeAction();
            string inwardItemId = collection["fldInwardItemId"];
            string verifyAction = VerificationStatus.ACTION.VerificationBranchConfirm;// P = Pull Out Item
            List<string> errorMessages = verificationDao.ValidateVerification(collection, CurrentUser.Account, verifyAction);
            Dictionary<string, string> result; //= commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);

            //check if validate contain error
            if ((errorMessages.Count > 0))
            {
                result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                if (result == null)
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
                resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
            }
            else
            {
                if (gQueueSqlConfig.TaskId == "306550")
                {
                    verificationDao.BranchConfirmation(collection, CurrentUser.Account, gQueueSqlConfig, verifyAction);
                    //check next available cheque
                    result = commonInwardItemDao.NextChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                    
                }
                else
                {
                    //check next available cheque
                    result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                }
                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);
                //if next cheque is not available.. check previous instead
                if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]))
                {
                    result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }
                if (gQueueSqlConfig.TaskId == "306550")
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("fldDesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                    //verificationDao.BranchConfirmation(collection, CurrentUser.Account, gQueueSqlConfig, verifyAction);
                }
                else
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                    //Pull out process here
                    verificationDao.VerificationPullOut(collection, CurrentUser.Account);

                    //Insert to cheque history
                    commonInwardItemDao.InsertChequeHistory(collection, verifyAction, CurrentUser.Account, gQueueSqlConfig.TaskId);
                }
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];



            }

            // if cheque available.. render cheque page
            if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
            {
                ViewBag.InwardItemViewModel = resultModel;
                ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                //add new thing
                ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
                return View("InwardClearing/ICCSDefault/ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
            else
            {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }


        public async Task<ActionResult> VerificationRepair(FormCollection collection)
        {
            await initializeBeforeAction();
            string inwardItemId = collection["fldInwardItemId"];
            string verifyAction = VerificationStatus.ACTION.VerificationRepair;// E = Repair Item
            List<string> errorMessages = verificationDao.ValidateVerification(collection, CurrentUser.Account, verifyAction);
            Dictionary<string, string> result;//= commonInwardItemDao.FindItemByInwardItemId(gQueueSqlConfig, collection, CurrentUser.Account, inwardItemId);

            //check if validate contain error
            if ((errorMessages.Count > 0))
            {
                result = commonInwardItemDao.ErrorCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                if (result == null)
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
                resultModel = InwardItemConcern.InwardItemWithErrorMessages(gQueueSqlConfig, result, errorMessages);
            }
            else
            {
                if (!String.IsNullOrEmpty(collection["fldUIC2"]))
                {
                    commonInwardItemDao.DeleteTempGif(collection["fldUIC2"]);
                }
                if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306220" || staskid == "306230")
                {
                    //Repair process here
                    verificationDao.VerificationRepairNew(collection, CurrentUser.Account, gQueueSqlConfig, verifyAction);
                    //check next available cheque
                    result = commonInwardItemDao.NextChequeNew(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }

                }
                else
                {
                    //check next available cheque
                    result = commonInwardItemDao.NextCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    if (result == null)
                    {
                        return View("InwardClearing/Base/_EmptyChequeVerification");
                    }
                }

                resultModel = InwardItemConcern.NextChequePopulateViewModel(gQueueSqlConfig, result, collection);

                //if next cheque is not available.. check previous instead
                if (inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]))
                {
                    result = commonInwardItemDao.PrevCheque(gQueueSqlConfig, collection, CurrentUser.Account);
                    resultModel = InwardItemConcern.PrevChequePopulateViewModel(gQueueSqlConfig, result, collection);
                }
                if (staskid == "306910" || staskid == "306210" || staskid == "306920" || staskid == "306930" || staskid == "308140" || staskid == "308130" || staskid == "306220" || staskid == "306230")
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("fldDesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                }
                else
                {
                    ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                    ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                    ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                    ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                    ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                    //add new thing
                    ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                    ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                    ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                    ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                    ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                    ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                    ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                    ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                    ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                    //Repair process here
                    verificationDao.VerificationRepair(collection, CurrentUser.Account);

                    //Insert to cheque history
                    commonInwardItemDao.InsertChequeHistory(collection, verifyAction, CurrentUser.Account, gQueueSqlConfig.TaskId);

                }
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;

                // if cheque available.. render cheque page
                if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
                {
                    ViewBag.InwardItemViewModel = resultModel;
                    return View("InwardClearing/ICCSDefault/ChequeVerificationPage");
                }
                // if not.. render empty cheque with close button
                else
                {
                    return View("InwardClearing/Base/_EmptyChequeVerification");
                }
            }

            // if cheque available.. render cheque page
            if (!inwardItemId.Equals(resultModel.allFields["fldInwardItemId"]) || errorMessages.Count > 0)
            {
                ViewBag.InwardItemViewModel = resultModel;
                ViewBag.IQA = resultModel.getField("fldIQA").Trim();
                ViewBag.IQADesc = resultModel.getField("flddesc").Trim();
                ViewBag.MICRCorrection = resultModel.getField("fldMicrCorrectionInd").Trim();
                ViewBag.MICRCorrectionDesc = resultModel.getField("MICRCrrectionDesc").Trim();
                ViewBag.DLLStatus = resultModel.getField("fldDLLStatusDesc").Trim();
                //add new thing
                ViewBag.RejectStatus1 = resultModel.allFields["fldRejectStatus1"];
                ViewBag.RejectStatus2 = resultModel.allFields["fldRejectStatus2"];
                ViewBag.HostStatus = bankHostStatusKBZDao.GetHostReturnReasonDesc(resultModel.allFields["fldRejectStatus1"]);
                ViewBag.NCFDesc = resultModel.allFields["ncfdesc"];
                ViewBag.NCFDesc2 = resultModel.allFields["ncfdesc2"];
                ViewBag.StatusDesc = resultModel.allFields["fldBankHostStatusDesc"];
                ViewBag.StatusDesc2 = resultModel.allFields["fldStatusDesc2"];
                ViewBag.NCFFlag = resultModel.getField("fldNonConformance").Trim();
                ViewBag.NCFFlag2 = resultModel.getField("fldNonConformance2").Trim();
                //Minus Record Indicator
                ViewBag.MinusRecordIndicator = true;
                ViewBag.LargeAmount = largeAmountDao.GetLargeAmount().Rows[0]["fldAmount"];
                return View("InwardClearing/ICCSDefault/ChequeVerificationPage");
            }
            // if not.. render empty cheque with close button
            else
            {
                return View("InwardClearing/Base/_EmptyChequeVerification");
            }
        }

        public void Log(string logMessage, string user)
        {
            if (CurrentUser.Account.Logindicator == "Y")
            {
                string path = "";
                path = CurrentUser.Account.LogPath;
                if (String.IsNullOrEmpty(CurrentUser.Account.UserId))
                {
                    path = path + @"\" + user + ".log";
                }
                else
                {
                    path = path + @"\" + CurrentUser.Account.UserAbbr + ".log";
                }
                using (StreamWriter w = System.IO.File.AppendText(path))
                {
                    w.WriteLine(logMessage);
                }
            }
        }

    }
}