using INCHEQS.Areas.ICS.Models.Verification;
using INCHEQS.Helpers;
using INCHEQS.Security.Account;
using INCHEQS.Security.AuditTrail;
using INCHEQS.Models.CommonInwardItem;
using INCHEQS.Models.Sequence;
using INCHEQS.Resources;
using INCHEQS.Security;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Web.Mvc;
using INCHEQS.DataAccessLayer;
using INCHEQS.Common;
using System.Data;
using INCHEQS.Areas.OCS.Models.CommonOutwardItem;
using INCHEQS.DataAccessLayer.OCS;

namespace INCHEQS.Areas.OCS.Models.Search
{
    public class SearchDao : ISearchDao
    {

        private readonly OCSDbContext dbContext;
        private readonly ICommonOutwardItemDao commonOutwardItemDao;
        private readonly ISequenceDao sequenceDao;
        private readonly IAuditTrailDao auditTrailDao;

        public SearchDao(OCSDbContext dbContext, ISequenceDao sequenceDao, ICommonOutwardItemDao commonOutwardItemDao, IAuditTrailDao auditTrailDao)
        {
            this.dbContext = dbContext;
            this.sequenceDao = sequenceDao;
            this.commonOutwardItemDao = commonOutwardItemDao;
            this.auditTrailDao = auditTrailDao;
        }


        public void Confirm(FormCollection col, AccountModel currentUser, string taskId)
        {
            try
            {
                string auditLogBefore = "";
                string auditLogAfter = "";
                string historyRemarks = "";
                //int nextVerifySeq = commonOutwardItemDao.GetNextVerifySeqNo(col["fldItemId"]);
                //int nextHistorySecNo = sequenceDao.GetNextSequenceNo("tblInwardItemHistory");
                int changesCounter = 0;

                Dictionary<string, dynamic> sqlUpdateInfo = new Dictionary<string, dynamic>();
                Dictionary<string, dynamic> sqlChequeHistory = new Dictionary<string, dynamic>();
                Dictionary<string, dynamic> sqlCondition = new Dictionary<string, dynamic>() { { "fldItemID", col["current_fldItemID"] } };
                //If no change value

                if (col["new_fldIssuerAccNo"] == col["current_fldIssuerAccNo"])
                {
                    sqlUpdateInfo.Add("fldIssuerAccNo", col["current_fldIssuerAccNo"]);
                    sqlChequeHistory.Add("fldIssuerAccNo", col["current_fldIssuerAccNo"]);
                }
                if (col["new_fldSerial"] == col["current_fldSerial"])
                {
                    sqlUpdateInfo.Add("fldSerial", col["current_fldSerial"]);
                    sqlChequeHistory.Add("fldSerial", col["current_fldSerial"]);
                }

                if (col["new_fldTCCode"] == col["current_fldTCCode"])
                {
                    sqlUpdateInfo.Add("fldTCCode", col["current_fldTCCode"]);
                    sqlChequeHistory.Add("fldTCCode", col["current_fldTCCode"]);
                }
                if (col["new_fldstatecode"] == col["current_fldstatecode"])
                {
                    sqlUpdateInfo.Add("fldStateCode", col["current_fldStateCode"]);
                    sqlChequeHistory.Add("fldStateCode", col["current_fldStateCode"]);
                }
                if (col["new_fldBankCode"] == col["current_fldBankCode"])
                {
                    sqlUpdateInfo.Add("fldBankCode", col["current_fldBankCode"]);
                    sqlChequeHistory.Add("fldBankCode", col["current_fldBankCode"]);
                }
                if (col["new_fldbranchcode"] == col["current_fldbranchcode"])
                {
                    sqlUpdateInfo.Add("fldBranchCode", col["current_fldBranchCode"]);
                    sqlChequeHistory.Add("fldBranchCode", col["current_fldBranchCode"]);
                }
                if (col["new_fldCheckDigit"] == col["current_fldCheckDigit"])
                {
                    sqlUpdateInfo.Add("fldCheckDigit", col["current_fldCheckDigit"]);
                    sqlChequeHistory.Add("fldCheckDigit", col["current_fldCheckDigit"]);
                }
                //if (col["new_fldAmount"] == col["current_fldAmount"] && col["current_fldAmount"] != null && col["current_fldAmount"] != "" && col["txtChequeAmount"] == col["current_fldamount"])
                //{
                //    sqlUpdateInfo.Add("fldAmount", Convert.ToDouble(col["current_fldAmount"]));
                //    sqlChequeHistory.Add("fldAmount", Convert.ToDouble(col["current_fldAmount"]));
                //}
                if (col["new_fldType"] == col["current_fldType"])
                {
                    sqlUpdateInfo.Add("fldType", col["current_fldType"]);
                    sqlChequeHistory.Add("fldType", col["current_fldType"]);
                }
                if (col["new_fldLocation"] == col["current_fldLocation"])
                {
                    sqlUpdateInfo.Add("fldLocation", col["current_fldLocation"]);
                    sqlChequeHistory.Add("fldLocation", col["current_fldLocation"]);
                }

                //Begin query contruction based on changed value
                if (col["new_fldIssuerAccNo"] != col["current_fldIssuerAccNo"])
                {
                    sqlUpdateInfo.Add("fldIssuerAccNo", col["new_fldIssuerAccNo"]);
                    sqlChequeHistory.Add("fldOriIssuerAccNo", col["current_fldIssuerAccNo"]);
                    sqlChequeHistory.Add("fldIssuerAccNo", col["new_fldIssuerAccNo"]);

                    auditLogBefore += " [Account No] : " + col["current_fldIssuerAccNo"];
                    auditLogAfter += " [Account No] : " + col["new_fldIssuerAccNo"];
                    historyRemarks += "| Account No. changed from " + col["current_fldIssuerAccNo"] + " to " + col["new_fldIssuerAccNo"] + ".";
                    changesCounter += 1;

                }
                if (col["new_fldSerial"] != col["current_fldSerial"])
                {
                    sqlUpdateInfo.Add("fldSerial", col["new_fldSerial"]);
                    sqlChequeHistory.Add("fldOriSerial", col["current_fldSerial"]);
                    sqlChequeHistory.Add("fldSerial", col["new_fldSerial"]);

                    auditLogBefore += " [Cheque No] : " + col["current_fldSerial"];
                    auditLogAfter += " [Cheque No] : " + col["new_fldSerial"];
                    historyRemarks += "| Cheque No. changed from " + col["current_fldSerial"] + " to " + col["new_fldSerial"] + ".";
                    changesCounter += 1;
                }
                if (col["new_fldTCCode"] != col["current_fldTCCode"])
                {
                    sqlUpdateInfo.Add("fldTCCode", col["new_fldTCCode"]);

                    sqlChequeHistory.Add("fldOriTCCode", col["current_fldTCCode"]);

                    sqlChequeHistory.Add("fldTCCode", col["new_fldTCCode"]);

                    auditLogBefore += " [Trans Code] : " + col["current_fldTCCode"];
                    auditLogAfter += " [Trans Code] : " + col["new_fldTCCode"];
                    historyRemarks += "| Trans Code changed from " + col["current_fldTCCode"] + " to " + col["new_fldTCCode"] + ".";
                    changesCounter += 1;
                }

                if (col["new_fldStateCode"] != col["current_fldStateCode"])
                {
                    sqlUpdateInfo.Add("fldStateCode", col["new_fldStateCode"]);
                    sqlChequeHistory.Add("fldOriStateCode", col["current_fldStateCode"]);
                    sqlChequeHistory.Add("fldStateCode", col["new_fldStateCode"]);

                    auditLogBefore += " [State Code] : " + col["current_fldStateCode"];
                    auditLogAfter += " [State Code] : " + col["new_fldStateCode"];
                    historyRemarks += "| State Code changed from " + col["current_fldStateCode"] + " to " + col["new_fldStateCode"] + ".";
                    changesCounter += 1;
                }
                if (col["new_fldBankCode"] != col["current_fldBankCode"])
                {
                    sqlUpdateInfo.Add("fldBankCode", col["new_fldBankCode"]);
                    sqlChequeHistory.Add("fldOriBankCode", col["current_fldBankCode"]);
                    sqlChequeHistory.Add("fldBankCode", col["new_fldBankCode"]);

                    auditLogBefore += " [Bank Code] : " + col["current_fldBankCode"];
                    auditLogAfter += " [Bank Code] : " + col["new_fldBankCode"];
                    historyRemarks += "| Bank Code changed from " + col["current_fldBankCode"] + " to " + col["new_fldbankcode"] + ".";
                    changesCounter += 1;
                }

                if (col["new_fldBranchCode"] != col["current_fldBranchCode"])
                {
                    sqlUpdateInfo.Add("fldBranchCode", col["new_fldBranchCode"]);
                    sqlChequeHistory.Add("fldOriBranchCode", col["current_fldBranchCode"]);
                    sqlChequeHistory.Add("fldBranchCode", col["new_fldBranchCode"]);

                    auditLogBefore += " [Branch Code] : " + col["current_fldBranchCode"];
                    auditLogAfter += " [Branch Code] : " + col["new_fldBranchCode"];
                    historyRemarks += "| Branch Code changed from " + col["current_fldBranchCode"] + " to " + col["new_fldBranchCode"] + ".";
                    changesCounter += 1;
                }
                if (col["new_fldCheckDigit"] != col["current_fldCheckDigit"])
                {
                    sqlUpdateInfo.Add("fldCheckDigit", col["new_fldCheckDigit"]);
                    sqlChequeHistory.Add("fldOriCheckDigit", col["current_fldCheckDigit"]);
                    sqlChequeHistory.Add("fldCheckDigit", col["new_fldCheckDigit"]);

                    auditLogBefore += " [Check Digit] : " + col["current_fldCheckDigit"];
                    auditLogAfter += " [Check Digit] : " + col["new_fldCheckDigit"];
                    historyRemarks += "| Check Digit changed from " + col["current_fldCheckDigit"] + " to " + col["new_fldCheckDigit"] + ".";
                    changesCounter += 1;
                }
                if (col["new_fldType"] != col["current_fldType"])
                {
                    sqlUpdateInfo.Add("fldType", col["new_fldType"]);
                    sqlChequeHistory.Add("fldOriType", col["current_fldType"]);
                    sqlChequeHistory.Add("fldType", col["new_fldType"]);

                    auditLogBefore += " [Type] : " + col["current_fldType"];
                    auditLogAfter += " [Type] : " + col["new_fldType"];
                    historyRemarks += "| Type changed from " + col["current_fldType"] + " to " + col["new_fldType"] + ".";
                    changesCounter += 1;
                }
                if (col["new_fldLocation"] != col["current_fldLocation"])
                {
                    sqlUpdateInfo.Add("fldLocation", col["new_fldLocation"]);
                    sqlChequeHistory.Add("fldOriLocation", col["current_fldLocation"]);
                    sqlChequeHistory.Add("fldLocation", col["new_fldLocation"]);

                    auditLogBefore += " [Location] : " + col["current_fldLocation"];
                    auditLogAfter += " [Location] : " + col["new_fldLocation"];
                    historyRemarks += "| Location changed from " + col["current_fldLocation"] + " to " + col["new_fldLocation"] + ".";
                    changesCounter += 1;
                }
                //if (col["txtChequeAmount"] != col["current_fldAmount"])
                //{
                //    sqlUpdateInfo.Add("fldAmount", Convert.ToDouble(col["txtChequeAmount"]));
                //    sqlChequeHistory.Add("fldAmount", Convert.ToDouble(col["txtChequeAmount"]));

                //    auditLogBefore += " [Amount] : " + col["current_fldAmount"];
                //    auditLogAfter += " [Amount] : " + col["txtChequeAmount"];
                //    historyRemarks += "| Amount changed from " + col["current_fldAmount"] + " to " + col["txtChequeAmount"] + ".";
                //    changesCounter += 1;
                //}
                if (changesCounter == 0)
                {
                    historyRemarks += "Item has no changes.";
                }
                //Compulsory update for tblItemInfo
                //TODO : this process is update and confirmed by maker
                sqlUpdateInfo.Add("fldupdateuserid", Convert.ToInt16(currentUser.UserId));
                sqlUpdateInfo.Add("fldupdatetimestamp", DateUtils.GetCurrentDatetimeForSql());
                sqlUpdateInfo.Add("fldreasoncode", "");
                sqlChequeHistory.Add("fldreasoncode", "");
                //sqlUpdateInfo.Add("fldItemType", "V");
                sqlUpdateInfo.Add("fldremark", col["textAreaRemarks"]);

                //Compulsory update for tblMICRRepair
                sqlChequeHistory.Add("flditemid", Convert.ToInt64(col["current_flditemid"]));
                //sqlChequeHistory.Add("flditemtype", "V");
                sqlChequeHistory.Add("fldremark", col["textAreaRemarks"]);
                sqlChequeHistory.Add("fldoriremark", col["current_fldremark"]);
                sqlChequeHistory.Add("fldcreatetimestamp", Convert.ToDateTime(col["current_fldcreatetimestamp"]));
                sqlChequeHistory.Add("fldupdateuserid", Convert.ToInt16(currentUser.UserId));

                //Excute the command
                dbContext.ConstructAndExecuteInsertCommand("tblmicrrepair", sqlChequeHistory);
                dbContext.ConstructAndExecuteUpdateCommand("tbliteminfo", sqlUpdateInfo, sqlCondition);

                //Add to audit trail
                auditTrailDao.Log("Edit Item Info - Item Id : " + col["current_flditemid"] + " Before Update=> " + auditLogBefore, currentUser);
                auditTrailDao.Log("Edit Item Info - Item Id : " + col["current_flditemid"] + " After Update=> " + auditLogAfter, currentUser);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public void Reject(FormCollection col, AccountModel currentUser, string taskId)
        {
            try
            {
                string auditLogBefore = "";
                string auditLogAfter = "";
                string historyRemarks = "";
                //int nextVerifySeq = commonOutwardItemDao.GetNextVerifySeqNo(col["fldItemId"]);
                //int nextHistorySecNo = sequenceDao.GetNextSequenceNo("tblInwardItemHistory");
                int changesCounter = 0;


                Dictionary<string, dynamic> sqlUpdateInfo = new Dictionary<string, dynamic>();
                Dictionary<string, dynamic> sqlChequeHistory = new Dictionary<string, dynamic>();
                Dictionary<string, dynamic> sqlCondition = new Dictionary<string, dynamic>() { { "fldItemID", Convert.ToInt64(col["current_flditemid"]) } };

                sqlChequeHistory.Add("fldissueraccno", col["current_fldissueraccno"]);
                sqlChequeHistory.Add("fldserial", col["current_fldserial"]);
                sqlChequeHistory.Add("fldtccode", col["current_fldtccode"]);
                sqlChequeHistory.Add("fldstatecode", col["current_fldstatecode"]);
                sqlChequeHistory.Add("fldbankcode", col["current_fldbankcode"]);
                sqlChequeHistory.Add("fldbranchcode", col["current_fldbranchcode"]);
                sqlChequeHistory.Add("fldcheckdigit", col["current_fldcheckdigit"]);
                if (col["current_fldamount"] != "")
                {
                    sqlChequeHistory.Add("fldamount", Convert.ToDouble(col["current_fldamount"]));
                }
                if (col["current_fldpvaccno"] != "")
                {
                    sqlChequeHistory.Add("fldpvaccno", col["current_fldpvaccno"]);
                }
                sqlChequeHistory.Add("fldtype", col["current_fldtype"]);
                sqlChequeHistory.Add("fldlocation", col["current_fldlocation"]);
                sqlChequeHistory.Add("fldcreatetimestamp", Convert.ToDateTime(col["current_fldcreatetimestamp"]));
                sqlChequeHistory.Add("fldupdateuserid", Convert.ToInt16(currentUser.UserId));
                sqlChequeHistory.Add("fldreasoncode", "403");
                sqlChequeHistory.Add("flditemid", Convert.ToInt64(col["current_flditemid"]));

                sqlUpdateInfo.Add("fldreasoncode", "403");

                auditLogBefore += " [Reason Code] : " + "";
                auditLogAfter += " [Reason Code] : " + "403";
                historyRemarks += "| Reason Code changed from " + "" + " to " + "403" + ".";

                //Compulsory update for tblItemInfo
                //TODO : this process is update and confirmed by maker
                sqlUpdateInfo.Add("fldUpdateUserId", currentUser.UserId);
                sqlUpdateInfo.Add("fldUpdateTimeStamp", DateUtils.GetCurrentDatetimeForSql());
                //sqlUpdateInfo.Add("fldItemType", "V");
                sqlUpdateInfo.Add("fldRemark", col["textAreaRemarks"]);

                //Compulsory update for tblMICRRepair
                //sqlChequeHistory.Add("fldItemId",col["current_fldItemID"]));
                ////sqlChequeHistory.Add("fldItemType", "V");
                //sqlChequeHistory.Add("fldRemark", col["textAreaRemarks"]);
                //sqlChequeHistory.Add("fldOriRemark", col["current_fldRemark"]);
                //sqlChequeHistory.Add("fldCreateTimeStamp", Convert.ToDateTime(col["current_fldCreateTimeStamp"]));

                //Excute the command

                dbContext.ConstructAndExecuteUpdateCommand("tblItemInfo", sqlUpdateInfo, sqlCondition);
                dbContext.ConstructAndExecuteInsertCommand("tblMICRrepair", sqlChequeHistory);

                //Add to audit trail
                auditTrailDao.Log("Edit Item Info - Item Id : " + col["current_fldItemID"] + " Before Update=> " + auditLogBefore, currentUser);
                auditTrailDao.Log("Edit Item Info - Item Id : " + col["current_fldItemID"] + " After Update=> " + auditLogAfter, currentUser);

            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public List<string> Validate(FormCollection col, AccountModel currentUser)
        {
            List<string> err = new List<string>();
            List<string> branchCode = BranchCode(col["new_fldBranchCode"].ToString(), col["new_fldBankCode"].ToString());

            if (commonOutwardItemDao.CheckIfRecordUpdatedOrDeleted(col["fldItemID"], col["fldUpdateTimeStamp"]))
            {
                err.Add(Locale.Thisrecordhasbeendeletedorupdatedbyanotheruser);
            }


            //Force initiate with null check, because this is shared validation

            if (col["txtChequeAmount"] == null || col["txtChequeAmount"] == "")
            {
                err.Add("Invalid Amount");
            }

            if (col["new_fldSerial"] != null)
            {
                //if (col["new_fldSerial"].Length != 6)
                //{
                //    err.Add(Locale.InvalidChequeNumberInvalidlengthofChequeNumber);
                //    //} else if (col["new_fldSerial"].ToString().Equals("0000000000")) {
                //    //    err.Add("Invalid Cheque Number. '0000000000' or empty is not allowed");
                //}
                if (Regex.IsMatch(col["new_fldSerial"].ToString(), "[^0-9]"))
                {
                    err.Add("Input of Cheque Number must be numeric only");
                }
            }

            if (col["new_fldIssuerAccNo"] != null)
            {

                if (col["new_fldIssuerAccNo"].ToString().Equals("") || col["new_fldissueraccno"].ToString().Equals("000000000000"))
                {
                    err.Add(Locale.InvalidAccountNumber0000000000000000oremptyisnotallowed);
                }
                //else if (col["new_fldIssuerAccNo"].Length != 10)
                //{
                //    err.Add("Account number must be 10 digits");

                //}
                else if (Regex.IsMatch(col["new_fldIssuerAccNo"].ToString(), "[^0-9]"))
                {
                    err.Add(Locale.InputofAccountNumbermustbenumericonly);
                }
            }

            if (col["new_fldBranchCode"] != null)
            {
                //if (col["new_fldBranchCode"].Length != 3)
                //{
                //    err.Add("Branch code must be 3 digits");
                //}
                if (Regex.IsMatch(col["new_fldBranchCode"].ToString(), "[^0-9]"))
                {
                    err.Add("Input of Branch Code must be numeric only");
                }
                else if (branchCode.Count.Equals(0))
                {
                    err.Add("Invalid Branch Code or Bank Code");
                }
            }

            return err;
        }
        
        public List<string> BranchCode(String BranchCode, String BankCode)
        {
            string stmt = "Select fldBranchCode from tblBranchMaster where" +
                " fldBranchCode=@BranchCode and fldBankCode = @BankCode";
            DataTable ds = dbContext.GetRecordsAsDataTable(stmt, new[] { new SqlParameter("@BranchCode", BranchCode), new SqlParameter("@BankCode", BankCode) });
            List<string> branchCodeAvailable = new List<string>();
            //ds = dbContext.GetRecordsAsDataTable(stmt);
            foreach (DataRow row in ds.Rows)
            {
                branchCodeAvailable.Add(row["fldBranchCode"].ToString());
            }
            return branchCodeAvailable;
            //return null;
        }
    }
}